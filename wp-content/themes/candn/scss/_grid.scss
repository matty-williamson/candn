// Count max width of row - px output
@function gridMaxWidth() {
  @if $gridMaxWidth == auto {
    @return $gridColumns * ($gridColumnWidth + $gridGutter);
  }
  @else {
    @return $gridMaxWidth;
  }
}

// Count col width - % output
@function columnWidth($columns) {
  @return $columns * (($gridColumnWidth + $gridGutter) / ($gridColumns * ($gridColumnWidth + $gridGutter)) * 100%);
}


// Use this mixin to create row
// Pass full to create full width row
// Pass inside to make grid inside the grid
@mixin row($option: none) {
  @if $option == full {
    width: 100%;
    *zoom: 1;
  }
  @else if $option == inside {
    max-width: gridMaxWidth();
    margin-left: -$gridGutter/2;
    margin-right: -$gridGutter/2;
    *zoom: 1;
  }
  @else {
    width: 100%;
    max-width: gridMaxWidth();
    margin-left: auto;
    margin-right: auto;
    *zoom: 1;
  }
  &:before, &:after {
    content: '';
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Use this mixin to create column
// Pass ammount of columns as argument
// Pass false if you dont need gutter
@mixin col($columns: $gridColumns, $gutter: true) {
  width: columnWidth($columns);
  float: left;
  @if $gutter == true {
    padding-left: $gridGutter/2;
    padding-right: $gridGutter/2;
  }
}

// Push columns - pass amount of columns as an argument
@mixin push($columns: 0) {
  position: relative;
  left: columnWidth($columns);
}

// Pull columns - pass amount of columns as an argument
@mixin pull($columns: 0) {
  position: relative;
  right: columnWidth($columns);
}

// Show grid background
// Works only on viewport bigger that max width and when its auto
@mixin grid() {
  @if $gridMaxWidth == auto {
    @include mq(gridMaxWidth()) {
      background: linear-gradient(to right,
        rgba(0,0,0,.05) 0px,
        rgba(0,0,0,.05) $gridGutter/2,
        rgba(0,0,0,.1) $gridGutter/2,
        rgba(0,0,0,.1) $gridGutter/2 + $gridColumnWidth,
        rgba(0,0,0,.05) $gridGutter/2 + $gridColumnWidth,
        rgba(0,0,0,.05) $gridGutter/2 + $gridColumnWidth + $gridGutter/2);
      background-size: ($gridGutter/2 + $gridColumnWidth + $gridGutter/2) $lh;
    }
  }
}